apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.7"
    // Default directory $buildDir/reports/jacoco
    //reportsDirectory = layout.buildDirectory.dir('JacocoReport')
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: ["$testTaskName", "create${sourceName.capitalize()}CoverageReport"]) {

                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = ['**/R.class',
                                  '**/R$*.class',
                                  '**/*$ViewInjector*.*',
                                  '**/*$ViewBinder*.*',
                                  '**/BuildConfig.*',
                                  '**/Manifest*.*',
                                  '**/*JsonAdapter*',
                                  '**/*_Impl*'
                ]
                def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/javac/${sourceName}/classes/", excludes: fileFilter)
                def mainClasses = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}/", excludes: fileFilter)
                def mainSrc = "${project.projectDir}/src/main/java"

                sourceDirectories.setFrom(files([mainSrc]))
                classDirectories.setFrom(files([mainClasses, javaClasses]))
                executionData.setFrom(files("${project.buildDir}/jacoco/${testTaskName}.exec"))
                //executionData.setFrom(files("${project.buildDir}/outputs/unit_test_code_coverage/debugUnitTest/${testTaskName}.exec"))

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
                doLast{
                    println("ðŸ¥³ðŸŽ‰ Coverage report generated in $buildDir/reports/jacoco/")
                }
            }
        }
    }
}

configurations.all{
    resolutionStrategy {
        eachDependency { details ->
            if ('org.jacoco' == details.requested.group) {
                details.useVersion "0.8.7"
            }
        }
    }
}